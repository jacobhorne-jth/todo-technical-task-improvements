/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma } from "@zenstackhq/runtime/models";
import { type GetNextArgs, type QueryOptions, type InfiniteQueryOptions, type MutationOptions, type PickEnumerable } from '@zenstackhq/swr/runtime';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
import * as request from '@zenstackhq/swr/runtime';

export function useCreateTask(options?: MutationOptions<Prisma.TaskGetPayload<Prisma.TaskCreateArgs> | undefined, unknown, Prisma.TaskCreateArgs>) {
    const mutation = request.useModelMutation('Task', 'POST', 'create', metadata, options, true);
    return {
        ...mutation,
        trigger: <T extends Prisma.TaskCreateArgs>(args: Prisma.SelectSubset<T, Prisma.TaskCreateArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.TaskGetPayload<T> | undefined>;
        }
    };
}

export function useCreateManyTask(options?: MutationOptions<Prisma.BatchPayload, unknown, Prisma.TaskCreateManyArgs>) {
    const mutation = request.useModelMutation('Task', 'POST', 'createMany', metadata, options, false);
    return {
        ...mutation,
        trigger: <T extends Prisma.TaskCreateManyArgs>(args: Prisma.SelectSubset<T, Prisma.TaskCreateManyArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.BatchPayload>;
        }
    };
}

export function useFindManyTask<T extends Prisma.TaskFindManyArgs>(args?: Prisma.SelectSubset<T, Prisma.TaskFindManyArgs>, options?: QueryOptions<Array<Prisma.TaskGetPayload<T> & { $optimistic?: boolean }>>) {
    return request.useModelQuery('Task', 'findMany', args, options);
}

export function useInfiniteFindManyTask<T extends Prisma.TaskFindManyArgs, R extends Array<Prisma.TaskGetPayload<T>>>(getNextArgs: GetNextArgs<Prisma.SelectSubset<T, Prisma.TaskFindManyArgs> | undefined, R>, options?: InfiniteQueryOptions<Array<Prisma.TaskGetPayload<T>>>) {
    return request.useInfiniteModelQuery('Task', 'findMany', getNextArgs, options);
}

export function useFindUniqueTask<T extends Prisma.TaskFindUniqueArgs>(args?: Prisma.SelectSubset<T, Prisma.TaskFindUniqueArgs>, options?: QueryOptions<Prisma.TaskGetPayload<T> & { $optimistic?: boolean }>) {
    return request.useModelQuery('Task', 'findUnique', args, options);
}

export function useFindFirstTask<T extends Prisma.TaskFindFirstArgs>(args?: Prisma.SelectSubset<T, Prisma.TaskFindFirstArgs>, options?: QueryOptions<Prisma.TaskGetPayload<T> & { $optimistic?: boolean }>) {
    return request.useModelQuery('Task', 'findFirst', args, options);
}

export function useUpdateTask(options?: MutationOptions<Prisma.TaskGetPayload<Prisma.TaskUpdateArgs> | undefined, unknown, Prisma.TaskUpdateArgs>) {
    const mutation = request.useModelMutation('Task', 'PUT', 'update', metadata, options, true);
    return {
        ...mutation,
        trigger: <T extends Prisma.TaskUpdateArgs>(args: Prisma.SelectSubset<T, Prisma.TaskUpdateArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.TaskGetPayload<T> | undefined>;
        }
    };
}

export function useUpdateManyTask(options?: MutationOptions<Prisma.BatchPayload, unknown, Prisma.TaskUpdateManyArgs>) {
    const mutation = request.useModelMutation('Task', 'PUT', 'updateMany', metadata, options, false);
    return {
        ...mutation,
        trigger: <T extends Prisma.TaskUpdateManyArgs>(args: Prisma.SelectSubset<T, Prisma.TaskUpdateManyArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.BatchPayload>;
        }
    };
}

export function useUpsertTask(options?: MutationOptions<Prisma.TaskGetPayload<Prisma.TaskUpsertArgs> | undefined, unknown, Prisma.TaskUpsertArgs>) {
    const mutation = request.useModelMutation('Task', 'POST', 'upsert', metadata, options, true);
    return {
        ...mutation,
        trigger: <T extends Prisma.TaskUpsertArgs>(args: Prisma.SelectSubset<T, Prisma.TaskUpsertArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.TaskGetPayload<T> | undefined>;
        }
    };
}

export function useDeleteTask(options?: MutationOptions<Prisma.TaskGetPayload<Prisma.TaskDeleteArgs> | undefined, unknown, Prisma.TaskDeleteArgs>) {
    const mutation = request.useModelMutation('Task', 'DELETE', 'delete', metadata, options, true);
    return {
        ...mutation,
        trigger: <T extends Prisma.TaskDeleteArgs>(args: Prisma.SelectSubset<T, Prisma.TaskDeleteArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.TaskGetPayload<T> | undefined>;
        }
    };
}

export function useDeleteManyTask(options?: MutationOptions<Prisma.BatchPayload, unknown, Prisma.TaskDeleteManyArgs>) {
    const mutation = request.useModelMutation('Task', 'DELETE', 'deleteMany', metadata, options, false);
    return {
        ...mutation,
        trigger: <T extends Prisma.TaskDeleteManyArgs>(args: Prisma.SelectSubset<T, Prisma.TaskDeleteManyArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.BatchPayload>;
        }
    };
}

export function useAggregateTask<T extends Prisma.TaskAggregateArgs>(args?: Prisma.Subset<T, Prisma.TaskAggregateArgs>, options?: QueryOptions<Prisma.GetTaskAggregateType<T>>) {
    return request.useModelQuery('Task', 'aggregate', args, options);
}

export function useGroupByTask<T extends Prisma.TaskGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TaskGroupByArgs['orderBy'] } : { orderBy?: Prisma.TaskGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<T['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<T['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]>(args?: Prisma.SubsetIntersection<T, Prisma.TaskGroupByArgs, OrderByArg> & InputErrors, options?: QueryOptions<{} extends InputErrors ?
        Array<PickEnumerable<Prisma.TaskGroupByOutputType, T['by']> &
        {
            [P in ((keyof T) & (keyof Prisma.TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Prisma.TaskGroupByOutputType[P]>
            : Prisma.GetScalarType<T[P], Prisma.TaskGroupByOutputType[P]>
        }
        > : InputErrors>) {
    return request.useModelQuery('Task', 'groupBy', args, options);
}

export function useCountTask<T extends Prisma.TaskCountArgs>(args?: Prisma.Subset<T, Prisma.TaskCountArgs>, options?: QueryOptions<T extends { select: any; } ? T['select'] extends true ? number : Prisma.GetScalarType<T['select'], Prisma.TaskCountAggregateOutputType> : number>) {
    return request.useModelQuery('Task', 'count', args, options);
}

export function useCheckTask(args: { operation: PolicyCrudKind; where?: { id?: string; ownerId?: string; spaceId?: string; title?: string; description?: string }; }, options?: QueryOptions<boolean>) {
    return request.useModelQuery('Task', 'check', args, options);
}
